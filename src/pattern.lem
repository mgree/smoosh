open import Smoosh

import Debug
   
type match_result 'a =
  NoMatch
| Symbolic
| Match of 'a

type bracket_char =
  Char of char
| Collating of string
| Equiv of string
| Class of string

type bracket_entry =
  BC of bracket_char
| Range of range_char * range_char (* should only be char or collating *)

type pattern_char =
    Lit of char
  | Bracket of bool (* matching? *) * list bracket_entry
  | QMark
  | Star

type pattern = list pattern_char

let rec string_of_range_char rc =
  match rc with
  | RChar c -> toString [c]
  | RCollating s -> string_of_bracket_char (Collating s)
  end

and string_of_bracket_char bc =
  match bc with
  | Char c -> toString [c]
  | Collating s -> "[." ^ s ^ ".]"
  | Equiv s -> "[=" ^ s ^ "=]"
  | Class s -> "[:" ^ s ^ ":]"
  end

and string_of_bracket_entry be =
  match be with
  | BC bc -> string_of_bracket_char bc
  | Range lo hi -> string_of_range_char lo ^ "-" ^ string_of_range_char hi
  end

and string_of_pattern_char pc =
  match pc with
  | Lit #'\\' -> "\\\\"
  | Lit #'?'  -> "\\?"
  | Lit #'*'  -> "\\?"
  | Lit #'['  -> "\\["
  | Lit c -> toString [c]
  | Bracket should_match es ->
     "[" ^ (if should_match then "" else "!") ^ 
      concat "" (List.map string_of_bracket_entry es) ^ "]"
  | QMark -> "?"
  | Star -> "*"
  end

and string_of_pattern p = concat "" (List.map string_of_pattern_char p)

let rec parse_bracket_terminator (pat:list char) (term:char) 
        : either string (list char * list char) =
  match pat with
  | [] -> Left "expected bracket terminator, found end-of-pattern"
  | c::#']'::pat' -> 
      if c = term
      then Right (pat', [])
      else 
        (* valid symbolic names are alpha . (alphanum|-)* 
           (it seems per http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap06.html#tagtcjh_4)
           so there's no way for us to have a valid x] for any x!=term *)
        Left ("mismatched bracket terminator: got " ^ 
                toString [c] ^ ", expected " ^ toString [term])
  | c::pat' -> 
     match parse_bracket_terminator pat' term with
     | Left err -> Left err
     | Right (pat'',cs) -> Right (pat'', c::cs)
     end
  end

let parse_bracket_class (pat:list char) (term:char) 
    :  either string (list char * string) =
  match parse_bracket_terminator pat term with
  | Left err -> Left err
  | Right (pat', cls) -> Right (pat', toString cls)
  end
                      
(* http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_03_05 *)
(* parsing brackets *)
let rec parse_bracket_char (pat:list char) : either string (list char * bracket_char) =
  match pat with
  | [] -> Left "expected bracket character, found end-of-pattern"
  | #'['::#'.'::pat' ->
     match parse_bracket_class pat' #'.' with
     | Left err -> Left err
     | Right (pat'', cls) -> Right (pat'', Collating cls)
     end
  | #'['::#'='::pat' ->
     match parse_bracket_class pat' #'=' with
     | Left err -> Left err
     | Right (pat'', cls) -> Right (pat'', Equiv cls)
     end
  | #'['::#':'::pat' ->
     match parse_bracket_class pat' #':' with
     | Left err -> Left err
     | Right (pat'', cls) -> Right (pat'', Class cls)
     end
  | c::pat' -> Right (pat', Char c)
  end

(* The starting range point and the ending range point shall be a
   collating element or collating symbol. An equivalence class
   expression used as a starting or ending point of a range expression
   produces unspecified results. An equivalence class can be used
   portably within a bracket expression, but only outside the
   range. If the represented set of collating elements is empty, it is
   unspecified whether the expression matches nothing, or is treated
   as invalid.

   per http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_03_05

   so we're just going to not parse the bracket... which means we'll treat it as raw characters.
*)

let range_bc (bc : bracket_char) : maybe range_char =
  match bc with
  | Char c -> Just (RChar c)
  | Collating cls -> Just (RCollating cls)
  | Equiv _c -> Nothing (* TODO implement *)
  | Class _c -> Nothing (* TODO implement *)
  end

let rec parse_bracket_quoted_entries (pat:list char)
      : either string (list char * list bracket_entry) =
  match pat with
  | [] -> Left "expected end quote"
  | #'\"'::pat' -> Right (pat', [])
  | c::pat' ->
     match parse_bracket_quoted_entries pat' with
     | Left err -> Left err
     | Right (pat'', es) -> Right (pat'', BC (Char c)::es)
     end
  end

let rec parse_bracket_entries (pat:list char) 
        : either string (list char * list bracket_entry) = 
  match pat with
  | [] -> Left "expected bracket entries, found end-of-pattern"
  | #']'::pat' -> Right (pat', [])
  | #'-'::#']'::pat' -> Right (pat', [BC (Char #'-')])
  | #'\"'::pat' -> 
     match parse_bracket_quoted_entries pat' with
     | Left _err -> 
        (* eh, treat it as a normal quote *)
        match parse_bracket_entries pat' with
        | Left err -> Left err
        | Right (pat'',es) -> Right (pat'',BC (Char #'\"')::es)
        end
     | Right (pat'', es) ->
        match parse_bracket_entries pat'' with
        | Left err -> Left err
        | Right (pat''', es') -> Right (pat''', es ++ es')
        end
     end
  | _ -> 
     match parse_bracket_char pat with
     | Left err -> Left err
     | Right (#'-'::#']'::pat', bc) ->
        (* '-' as final char is a literal *)
        Right (pat', [BC (Char #'-'); BC bc])
     | Right (#'-'::pat', bc) -> 
        match parse_bracket_char pat' with
        | Left _ -> 
           match parse_bracket_entries (#'-'::pat') with
           | Left err -> Left err
           | Right (pat'',es) -> Right (pat'',BC bc::es)
           end
        | Right (pat'',bc') -> 
           match (range_bc bc, range_bc bc', parse_bracket_entries pat'') with
           | (Just lo, Just hi, Right (pat''',es)) -> Right (pat''',Range lo hi::es)
           | (Nothing, _, _) -> 
              Left ("invalid range character: " ^ string_of_bracket_char bc)
           | (_, Nothing, _) -> 
              Left ("invalid range character: " ^ string_of_bracket_char bc')
           | (_, _, Left err) -> Left err
           end
        end
     | Right (pat',bc) ->
        match parse_bracket_entries pat' with
        | Left err -> Left err
        | Right (pat'',es) -> Right (pat'',BC bc::es)
        end
     end
  end

(* If a bracket expression contains at least three list elements,
   where the first and last list elements are the same
   single-character element of <period>, <equals-sign>, or <colon>,
   then it is unspecified whether the bracket expression will be
   treated as a collating symbol, equivalence class, or character
   class, respectively; treated as a matching list expression; or
   rejected as an error. -- http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap09.html#tag_09_03_05

   i.e., if we just have [.a.], we can treat it as matching:
      . and a
      collating symbols matching a
      an error

   we'll treat them as a range, like dash
 *)

let bracket_initial_literal (c:char) = c = #']' || c = #'-'

let rec parse_bracket (pat:list char) : either string (list char * pattern_char) =
  match pat with
  | [] -> Left "unterminated bracket, found end-of-pattern"
  | c::pat' ->
     let (matching,pat'') = 
       if c = #'!' 
       then (false, pat')
       else (true,  pat)
     in
     match pat'' with
     | [] -> Left "unterminated bracket, found end-of-pattern"
     | #']'::[] -> Left "empty bracket, treating as literal characters"
     | c::pat''' ->
       let (realPat,frontEs) = 
         if bracket_initial_literal c
         then (pat''', [BC (Char c)])
         else (pat'', [])
       in
       match parse_bracket_entries realPat with
       | Left err -> Left err
       | Right (restPat, es) -> Right (restPat, Bracket matching (frontEs ++ es))
       end
     end
  end

let rec parse_quoted_pattern (pat:list char) 
  : either string (list char * pattern) =
  (* "If any character (ordinary, shell special, or pattern special)
      is quoted, that pattern shall match the character itself. The
      shell special characters always require quoting."

     "When pattern matching is used where shell quote removal is not
      performed (such as in the argument to the find - name primary
      when find is being called using one of the exec functions as
      defined in the System Interfaces volume of POSIX.1-2017, or in
      the pattern argument to the fnmatch() function), special
      characters can be escaped to remove their special meaning by
      preceding them with a <backslash> character. This escaping
      <backslash> is discarded. The sequence "\\" represents one
      literal <backslash>. All of the requirements and effects of
      quoting on ordinary, shell special, and special pattern
      characters shall apply to escaping in this context."
   *)
  let recur pat' pcs1 =
    match parse_quoted_pattern pat' with
    | Left err -> Left err
    | Right (pat'', pcs2) -> Right (pat'', pcs1 ++ pcs2)
    end
  in
  match pat with
  | [] -> Left "unterminated quote"
  | #'\"'::pat' -> Right (pat', [])
  | #'\\'::c::pat' -> recur pat' [Lit c]
  | c::pat' -> recur pat' [Lit c]
  end  

and parse_pattern_char (pat:list char) : either string (list char * pattern) = 
  match pat with
  | [] -> Left "expected pattern char, got end-of-pattern"
  | #'*' ::pat' -> Right (pat', [Star])
  | #'?' ::pat' -> Right (pat', [QMark])
  | #'[' ::pat' -> 
       match parse_bracket pat' with
       | Left _ -> Right (pat', [Lit #'['])
       | Right (pat'', pc) -> Right (pat'', [pc])
       end
  | #'\"'::pat' -> parse_quoted_pattern pat'
  | #'\\'::[]   -> Left "unescaped backslash at end-of-pattern"
  | #'\\'::c::pat' -> Right (pat', [Lit c])
  | c    ::pat' -> Right (pat', [Lit c])
  end

let rec parse_pattern_loop (pat:list char) : either string (list char * pattern) = 
  match pat with
  | [] -> Right ([], [])
  | _ -> 
     match parse_pattern_char pat with
     | Left err -> Left err
     | Right (pat', pcs1) -> 
        match parse_pattern_loop pat' with
        | Left err -> Left err
        | Right (pat'', pcs2) -> Right (pat'', pcs1 ++ pcs2)
        end
     end
  end

let parse_pattern (pat:list char) : either string pattern =
  match parse_pattern_loop pat with
  | Left err -> Left err
  | Right ([], pattern) -> Right pattern
  | Right (pat', _) -> Left ("unexpected unparsed pattern in '" ^ toString pat' ^ "'")
  end

let match_entry (lc:locale) (c : char) (be : bracket_entry) : bool = 
  match be with
  | BC (Char c')       -> c' = c
  | BC (Collating cls) -> lc.collates c cls
  | BC (Equiv cls)     -> lc.equiv c cls
  | BC (Class cls)     -> lc.charclass c cls
  | Range lo hi        -> lc.range c lo hi
  end

(* Does an EXACT pattern match. *)
let rec match_exact_pattern (lc:locale) (pat:pattern) (s:symbolic_string) : match_result (symbolic_string) =
  match (pat,s) with

  (* empty pattern *)
  | ([]       ,      []) -> Match []
  | ([]       ,       _) -> NoMatch

  (* question-mark expressions *)
  | (QMark::_   ,     []) -> NoMatch
  | (QMark::pat', _ ::s') -> match_exact_pattern lc pat' s'

  (* star expressions *)
  | (Star::pat',     []) -> match_exact_pattern lc pat' []
  | (Star::pat', c ::s') ->
     match match_exact_pattern lc pat' (c::s') with      (* try matching empty first *)
     | NoMatch -> match_exact_pattern lc (Star::pat') s' (*   ...no dice; skip a character *)
     | Symbolic -> Symbolic
     | Match s' -> Match s'                      (*   ...success; we have our answer *)
     end

  (* bracket expressions *)
  | (Bracket _ _::_, []) -> NoMatch
  | (Bracket _ _::_, Sym _::_) -> Symbolic
  | (Bracket should_match cs::pat', C(c)::s') ->
     if should_match = any (match_entry lc c) cs 
     then match_exact_pattern lc pat' s'
     else NoMatch
                 
  (* plain characters *)                                  
  | (   _::_,        []) -> NoMatch
  | (Lit c1::pat', C c2::s') ->
     if c1 = c2
     then match_exact_pattern lc pat' s'
     else NoMatch
  
  (* symbolic catch-all *)
  | (_, Sym _::_) -> Symbolic
  end

let match_exact (lc:locale) (ss_pat:symbolic_string) (s:symbolic_string) : match_result (symbolic_string) =
  match try_concrete ss_pat with
  | Nothing -> Symbolic
  | Just s_pat ->
     match parse_pattern (toCharList s_pat) with
     | Left _err -> NoMatch
     | Right pat -> match_exact_pattern lc pat s
     end
  end

(* Does matching a la %/# *)
let rec try_match_substring_loop (lc:locale) s sizes (pat : pattern) (str:symbolic_string) =
  match sizes  with
  | [] -> NoMatch
  | size::sizes' -> 
     let (first,rest) = splitAt size str in
     let (substr,keep) = 
       match s with
       | Prefix -> (first,rest)
       | Suffix -> (rest,first)
       end
     in
     match match_exact_pattern lc pat substr with
     | NoMatch -> try_match_substring_loop lc s sizes' pat str
     | Symbolic -> Symbolic
     | Match _ -> Match keep
     end
  end

let try_match_substring (lc:locale) (s:substring_side) (m:substring_mode) (pat : string) (str:symbolic_string) : symbolic_string =
  match parse_pattern (toCharList pat) with
  | Left _err -> str
  | Right pattern ->
    let sizes = List.genlist (fun idx -> idx) (length str + 1) in
    let ordered_sizes = 
      match (m,s) with
      | (Shortest,Prefix) -> sizes
      | (Longest, Suffix) -> sizes
      | (Longest, Prefix) -> reverse sizes
      | (Shortest,Suffix) -> reverse sizes
      end
    in
    match try_match_substring_loop lc s ordered_sizes pattern str with
    | NoMatch -> str
    | Symbolic -> [Sym (SymPat s m (symbolic_string_of_string pat) str)]
    | Match str' -> str'
    end
  end
