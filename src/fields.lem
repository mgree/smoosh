open import Smoosh
open import Path

import Debug

(**********************************************************************)   
(* LATE STAGE EXPANSION ***********************************************)   
(**********************************************************************)
(* These functions are kept out of the recursive knot of
   expansion/evaluation in semantics.lem for two reasons: 

   - Field splitting is needed by builtin_read in command.lem
   - It keeps semantics.lem a bit smaller
 *)

(*
 * Stage 2 Expansion: Field Splitting
 *)

val is_ws : char -> bool
val collect_non_ifs : list char -> list char -> (list char) * (list char)
(*val collect_ifs_whitespace : list char -> list char -> list char*)
val split_expstring : list char -> list char -> intermediate_fields
val split_word : list char -> (intermediate_fields * expanded_words) -> intermediate_fields
val concat_expanded : expanded_words -> symbolic_string
val collapse_quoted : expanded_words -> expanded_words
val split_fields : forall 'a. OS 'a => os_state 'a -> expanded_words -> intermediate_fields
val clean_fields : intermediate_fields -> intermediate_fields
val skip_field_splitting : expanded_words -> intermediate_fields
val field_splitting : forall 'a. OS 'a => os_state 'a -> expanded_words -> intermediate_fields  

let default_ifs = toCharList " \t\n"

let is_ws c = elem c default_ifs

let non_empty_word ifs w =
  match w with
  | ExpS(s) ->
      not (all (fun c -> is_ws c && elem c ifs) (toCharList s))
  | _ ->
      true
  end

let rec collect_non_ifs ifs ls =
  match ls with
  | [] -> ([], [])
  | (c::cs) ->
      if elem c ifs
      then ([], c::cs)
      else let (f, remaining) = collect_non_ifs ifs cs in
           (c::f, remaining)
  end

let rec split_expstring ifs clst =
   match clst with
   | [] -> []
   | c::cs ->
      if elem c ifs
      then (if is_ws c then WFS else FS)::split_expstring ifs cs
      else let (cc, cs1) = collect_non_ifs ifs cs in 
           (Field (symbolic_string_of_char_list (c::cc)))::(split_expstring ifs cs1)
  end

let rec split_word ifs p =
  match p with
  | (f, []) -> f
  | (f, UsrF::UsrF::wrds) -> split_word ifs (f, UsrF::wrds)
  | (f, UsrF::wrds) -> split_word ifs (f ++ [FS], wrds)
  | (f, ExpS(s)::wrds) ->
      let new_fields = split_expstring ifs (toCharList s) in
      split_word ifs (f ++ new_fields, wrds)
  | (f, UsrS(s)::wrds) -> split_word ifs (f ++ [Field (symbolic_string_of_string s)], wrds)
  | (f, At(fs)::wrds) -> split_word ifs (f ++ map Field fs, wrds)
  | (f, DQuo(ss)::wrds) -> split_word ifs (f ++ [QField ss], wrds)
  | (f, EWSym sym::wrds) -> split_word ifs (f ++ [Field [Sym sym]], wrds)
  end

let rec concat_expanded w =
  match w with
  | [] -> symbolic_string_of_string ""
  | UsrF::ws -> symbolic_string_of_string " " ++ concat_expanded ws
  | ExpS s::ws -> symbolic_string_of_string s ++ concat_expanded ws
  | DQuo ss::ws -> 
    (* we don't include the quotes, since they'll be ultimately erased anyway! *)
     ss ++ concat_expanded ws
  | At fs::ws -> 
     (* we collapse the result of $@ expansion, too. special cased in expand_control *)
     symbolic_string_of_fields fs ++ concat_expanded ws
  | EWSym sym::ws -> Sym sym::concat_expanded ws
  | UsrS _::_ -> Assert_extra.failwith "broken invariant in concat_expanded: no UsrS should be found"
  end

let collapse_quoted w = 
  let is_at e = 
    match e with
    | At _ -> true
    | _ -> false
  end in
  match break is_at w with
  | (w',[]) -> [DQuo (concat_expanded w')] (* no At anywhere, just collapse it *)
  | (pre_w, (At fs)::post_w) ->
     (* we have an At---attach pre_w to the first one, post_w to the last one *)
     pre_w ++ intersperse UsrF (map DQuo fs) ++ post_w
  | _ -> Assert_extra.failwith "broken invariant in collapse_quoted: couldn't find At anywhere, but got weird output"
  end

let rec skip_field_splitting w =
  match w with
  | [] -> []
  (* properly handle null fields that might have been generated

       these are distinct from empty fields, which ought to have `UsrS
     ""` or `ExpS ""` or `DQuo ...` in them.  *)
  | UsrF::UsrF::ws -> skip_field_splitting (UsrF::ws)
  | UsrF::ws -> FS::skip_field_splitting ws
  | UsrS s::ws -> Field (symbolic_string_of_string s)::skip_field_splitting ws
  | ExpS s::ws -> Field (symbolic_string_of_string s)::skip_field_splitting ws
  | DQuo s::ws -> QField s::skip_field_splitting ws
  | At fs::ws -> intersperse FS (List.map QField fs) ++ skip_field_splitting ws
  | EWSym sym::ws -> Field [Sym sym]::skip_field_splitting ws
  end

let rec remove_leading_separators exp_words =
  match exp_words with
  | UsrF::ws -> remove_leading_separators ws
  | _ -> exp_words
  end

let prepare_words ifs exp_words =
  let ws = filter (non_empty_word ifs) exp_words in
  remove_leading_separators ws

let split_fields s0 exp_words =
  let ifs = lookup_string_param s0 "IFS" in
  match ifs with
  | Nothing -> split_word default_ifs ([], (prepare_words default_ifs exp_words))
  | Just fs -> 
     match try_concrete fs with
     | Nothing -> 
        (* TODO 2018-08-29 unsoundly using default IFS. symbolic IFS
           is basically impossible. should record this
           unsoundness. *)
        split_word default_ifs ([], (prepare_words default_ifs exp_words))
     | Just "" -> 
        (* If the value of IFS is null, no field splitting shall be performed. *)
        skip_field_splitting exp_words
     | Just s -> split_word (toCharList s) ([], (prepare_words (toCharList s) exp_words))
     end
  end

let rec combine_fields f =
  match f with
  | [] -> []
  | [WFS] -> [] (* Remove trailing field separators *)
  | (WFS::WFS::rst) -> combine_fields (WFS::rst) (* Combine adjacent whitespace separators *)
  | (WFS::FS::rst) -> combine_fields (FS::rst)
  | (FS::WFS::rst) -> combine_fields (FS::rst)
  | (Field(s1)::Field(s2)::rst) -> combine_fields (Field(s1 ++ s2)::rst)
  | (QField(s1)::QField(s2)::rst) -> combine_fields (QField(s1 ++ s2)::rst)
  | (QField(s1)::Field(s2)::rst) -> combine_fields (Field((escape_patterns s1) ++ s2)::rst)
  | (Field(s1)::QField(s2)::rst) -> combine_fields (Field(s1 ++ (escape_patterns s2))::rst)
  | (WFS::rst) -> FS::(combine_fields rst)
  | (f::rst) -> f::(combine_fields rst)
  end

let rec clean_fields f =
  match f with
  | (WFS::rst) -> clean_fields rst
  | _ -> combine_fields f
  end

let debug_tmp_field tf =
  match tf with
  | WFS -> "WFS"
  | FS -> "FS"
  | Field s -> "Field(" ^ string_of_symbolic_string s ^ ")"
  | QField s -> "QField(" ^ string_of_symbolic_string s ^ ")"
  end

let field_splitting s0 w = 
  let fs = split_fields s0 w in
  clean_fields fs

(*
 * Stage 3 Expansion: Pathname expansion
 *)

val insert_field_separators : list string -> intermediate_fields
let rec insert_field_separators fs =
  match fs with
  | [] -> []
  | [f] -> [Field (symbolic_string_of_string f)]
  | f::fs' -> Field (symbolic_string_of_string f)::FS::insert_field_separators fs'
  end

val pathname_expansion : forall 'a. OS 'a => os_state 'a -> intermediate_fields -> intermediate_fields

(* 2018-12-20 
   Steve Chong helped me discover that pathname expansion was brutally slow.
   We do a quick check to see whether pathname expansion would even do anything.
*)
let rec needs_expansion ss =
  match ss with
  | [] -> false
  | C #'['::[] -> false (* kludge for a bare [ *)
  | C #'?'::_ -> true
  | C #'*'::_ -> true
  | C #'['::_ -> true
  | _::ss' -> needs_expansion ss'
  end

(* Parameter expansion only happens on unquoted fields *)
let rec pathname_expansion s0 f =
  match f with
  | [] -> []
  | Field s::rst -> 
     let matches = 
       if needs_expansion s
       then match try_concrete s with
            | Just pat -> match_path s0 pat
            | Nothing -> [] (* slightly inaccurate: we're not modeling symbolic pathname expansions *)
            end 
       else []
     in
     let expansions = 
       if null matches 
       then [Field (unescape_pattern s)] 
       else insert_field_separators matches 
     in
     expansions ++ pathname_expansion s0 rst
  | f::rst -> f::(pathname_expansion s0 rst)
  end

(*
 * Stage 4 Expansion: Quote Removal
 *)

val remove_quotes : intermediate_fields -> intermediate_fields
val to_fields : intermediate_fields -> fields
val finalize_fields : intermediate_fields -> fields
val quote_removal : intermediate_fields -> fields

let rec remove_quotes f =
  match f with
  | [] -> []
  | QField s :: rst -> Field s::remove_quotes rst
  | f :: rst -> f::remove_quotes rst
  end

let rec to_fields f =
  match f with
  | []            -> []
  | Field fs::rst -> fs::(to_fields rst)
  | FS::FS::rst   -> (symbolic_string_of_string "")::(to_fields (FS::rst))
  | FS::rst       -> to_fields rst
  (* TODO 2017-12-01 Preferably we need an AST that doesn't have WFS or QField's at this point, or lem failure *)
  | WFS::_        -> 
     Assert_extra.failwith "broken invariant in to_fields: didn't expect WFS"
  | QField _::_   -> 
     Assert_extra.failwith "broken invariant in to_fields: didn't expect QField"
  end

let rec finalize_fields f =
  match f with
  | (FS::rst) -> symbolic_string_of_string ""::finalize_fields rst
  | _ -> to_fields f
  end

let quote_removal f =
  let no_quotes = combine_fields (remove_quotes f) in
  finalize_fields no_quotes

