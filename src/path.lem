open import Smoosh

open import Pattern

val split_on_slash : list char -> list (list char)
let split_on_slash = split_on false (* not escapable *) #'/'

type path_info = <| path_prefix : string
                  ; trailing_slash : bool
                  |>

val has_leading_dot : list char -> bool
let has_leading_dot = function
  | #'.'::_ -> true
  | _ -> false
  end

val has_trailing_slash : list char -> bool
let has_trailing_slash cs =
  match reverse cs with
  | #'/'::_ -> true
  | _ -> false
  end

val parse_path_pattern : forall 'a. OS 'a => os_state 'a -> string -> list string * path * path_info
let parse_path_pattern os pat =
  match toCharList pat with
  | #'/'::pat' -> (map toString (split_on_slash pat'), "/", <| path_prefix = "/"; trailing_slash = has_trailing_slash pat' |>)
  | chars -> (map toString (split_on_slash chars), os.sh.cwd, <| path_prefix = ""; trailing_slash = has_trailing_slash chars |>)
  end

(* We use shortest matching because we won't look at the content of the match.
 * We only care whether or not there was a match.
 *)
val match_pattern_file_list : forall 'a. OS 'a => os_state 'a -> locale -> path -> string -> set (string * file path)
let match_pattern_file_list os lc dir pat =
  Set.map (fun (name,file) ->
      (name,
       match file with
       | File -> File
       | Dir _ -> Dir (dir ^ "/" ^ name)
       end))
    (Set.filter
      (fun (file, _) -> 
        match match_exact lc (symbolic_string_of_string pat) (symbolic_string_of_string file) with
        | Match _ -> not (has_leading_dot (toCharList file)) || has_leading_dot (toCharList pat)
        | _ -> false
       end)
      (readdir os dir))

val match_dir : forall 'a. OS 'a => os_state 'a -> path -> locale -> string -> set (string * file path)
let match_dir os dir lc name =
  match name with
  | "" -> Set.singleton ("", Dir dir)
  | "." -> Set.singleton (".", Dir dir)
  | ".." -> Set.singleton ("..", Dir (dotdot dir))
  | _ -> match_pattern_file_list os lc dir name
end     
   
val walk : forall 'a. OS 'a => os_state 'a -> (maybe path * path) -> path_info -> locale -> list string -> set (string * file path)
let rec walk os (path_so_far, dir) pinfo lc path =
  match path with
  | [] ->
     let full_path =
       match path_so_far with
       (* If there is no path so far, we are matching nothing,
        * so just return the path prefix (either "" or "/") *)
       | Nothing -> pinfo.path_prefix
       (* If we have a path so far, we are done, just return that path *)
       | Just p -> p
       end in
      Set.singleton (full_path ^ if pinfo.trailing_slash then "/" else "", Dir dir)
  | path'::rest ->
    bigunionMapBy compare_by_first (fun (sub, file) ->
      let full_path =
        match path_so_far with
        (* If we have nothing so far we are at the start of our
         * walk. Therefore we append the path prefix. *)
        | Nothing -> pinfo.path_prefix ^ sub
        (* Insert a '/' between two directories (or a directory and a file) *)
        | Just parent -> parent ^ "/" ^ sub
        end in
      match file with
      | File -> 
         if null rest && not (pinfo.trailing_slash)
         then Set.singleton (full_path, File)
         else Set.empty
      | Dir dir' -> walk os (Just full_path, dir') pinfo lc rest
      end)
      (match_dir os dir lc path')
  end

val match_path : forall 'a. OS 'a => os_state 'a -> string -> list path
let match_path os path =
  let (pat,start,pinfo) = parse_path_pattern os path in
  Set_extra.toOrderedList (Set.map fst (walk os (Nothing, start) pinfo os.sh.locale pat))

open import Os_symbolic
(* instantiated version for testing from OCaml *)
val match_path_symbolic : os_state symbolic -> string -> list path
let match_path_symbolic = match_path                                                     
